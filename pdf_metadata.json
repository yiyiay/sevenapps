{
  "pdfs": {
    "0cdcd536-8d91-4c82-8243-845dbb925b03": {
      "pdf_id": "0cdcd536-8d91-4c82-8243-845dbb925b03",
      "filename": "filetosent.pdf",
      "path": "uploads\\0cdcd536-8d91-4c82-8243-845dbb925b03.pdf",
      "extracted_text": "SevenApps Backend Developer Take-Home\nChallange: PDF Chat API\nOverview\nThis is designed to thoroughly assess your skills in Python\nprogramming, API development, integration with external services,\nusing Large Language Models and to understand your problem-solving\nskills .\nIn this challenge, you'll be tasked with building a FastAPI\napplication that enables users to interact with PDF files and being\nable to chat with it!\nProject Description\nYour primary objective is to develop a sophisticated FastAPI\napplication that serves as the backbone of a PDF chat service.\nThis application will provide robust endpoints for uploading PDF\ndocuments and\nThe core functionality of your application should encompass:\n1. Efficient uploading and processing of PDF documents\n2. Intelligent extraction and storage of text content and associated\nmetadata\n3. Seamless integration with the Gemini API for advanced natural\nlanguage processing\n4. Provision of an intuitive and responsive chat functionality based\non PDF content\n5. Implementation of comprehensive error handling and detailed\nlogging mechanisms\n6. Ensuring top-notch security measures and addressing scalability\nconcerns\n7. Optimizing performance for handling large volumes of data and\nconcurrent users\nDetailed Tasks\n1. Set up your Large Language Model (LLM)\nWhile we highly recommend leveraging Google's Gemini API for this\nproject due to its advanced capabilities and free tier, we understand\nthe importance of flexibility in choosing the right tools for the job.\nAs such, you have the liberty to select any state-of-the-art Large\nLanguage Model for inference. Here are some options to consider:\nFor the purposes of this comprehensive guide, we'll focus on setting\nup and utilizing the Gemini API, given its powerful features and\naccessibility.\n1.1 Setting up the Gemini API\nFollow these detailed steps to set up your Gemini API access:\nFor in-depth implementation instructions and best practices, we\nstrongly recommend referring to the Gemini API Python Quickstart\nDocumentation . This resource provides valuable insights into\ninitializing the API client, sending requests, and handling responses\neffectively.\n1.2 API Key ManagementGoogle Gemini API (recommended and free)\nLocal models using Ollama or LM Studio (free)\nOpenAI's GPT models (GPT-3.5, GPT-4)\nAnthropic's Claude\n1. Open your web browser and navigate to\nhttps://ai.google.dev/aistudio\n2. Sign in with your Google account. If you don't have one, you'll\nneed to create it.\n3. Once logged in, locate and click on the \"Create\" button in the\ntop-right corner of the page.\n4. From the dropdown menu, select \"API key\".\n5. A new API key will be generated. Carefully copy this key and store\nit securely.\nImplementing secure key management is crucial for maintaining the\nintegrity and security of your application. Follow these best\npractices:\n2 Chat With PDF API\n2.1 FastAPI Endpoint Implementation\nDevelop the following FastAPI endpoints to facilitate PDF upload and\nchat functionality:\n2.1.1 PDF Upload1. Utilize environment variables to store sensitive information,\nincluding API keys.\n2. Create a . e n v file in your project's root directory to securely\nstore your Gemini API key locally.\n3. Leverage a robust library like p y t h o n \u0000 d o t e n v to efficiently load\nenvironment variables in your application.\n4. Ensure that your . e n v file is explicitly added to your . g i t i g n o r e\nfile to prevent accidental exposure of sensitive information in\nversion control.\nRequest Method:  POST\nEndpoint:  / v 1 / p d f\nDescription:  Endpoint for uploading and registering a PDF\nInput:\nDescription:  Multipart form data containing the PDF file\nExample\nc u r l  - X  P O S T  \" h t t p : \u0000 \u0000 l o c a l h o s t : 8 0 0 0 / v 1 / p d f \"  \\\n- F  \" f \u0000 l e = @ / p a t h / t o / y o u r / p d f / f \u0000 l e . p d f \"\nOutput:\nDescription:  JSON response with the generated PDF ID\nExample\n{\n    \" p d f _ i d \" :  \" u n i q u e _ p d f _ i d e n t i f \u0000 e r \"\n2.1.2 Chat with PDF2.1.1.1 State Management\nImplement a robust state management system with the following\nfeatures:}\nProcess:\na .  V a l i d a t e  t h e  u p l o a d e d  f \u0000 l e  ( f \u0000 l e  t y p e ,  s i z e  l i m i t s )\nb .  G e n e r a t e  a  u n i q u e  i d e n t i f \u0000 e r  f o r  t h e  P D F\n1. Design a data structure to efficiently store PDF(s).\n2. Implement error handling to manage various PDF formats and\npotential parsing issues.\n3. Store extracted text along with associated metadata (e.g.,\nfilename, document ID, page count) in a structured format.\n4. Consider implementing text preprocessing techniques to enhance\nthe quality of extracted content.\nRequest Method:  POST\nEndpoint:  / v 1 / c h a t / { p d f _ i d }\nDescription:  Endpoint for interacting with a specific PDF\nInput: JSON body containing the user's message\n{\n    \" m e s s a g e \" :  \" W h a t  i s  t h e  m a i n  t o p i c  o f  t h i s  P D F ? \"\n}\nOutput: JSON response with the AI-generated answer\n{\n    \" r e s p o n s e \" :  \" T h e  m a i n  t o p i c  o f  t h i s  P D F  i s \u0000 \u0000 \u0000 \"\n}\nProcess:\n2.3 LLM Integration\nImplement seamless integration with the Gemini API for advanced\nnatural language processing:\nFor detailed implementation guidance, refer to the Gemini API\ndocumentation  and best practices for prompt engineering and API\nintegration.\nProblems to tackle (Bonus points!)\n2.5 Error Handling and Logging\nImplement comprehensive error handling and logging mechanisms:a .  V a l i d a t e  t h e  p d f _ i d  a n d  r e t r i e v e  t h e  a s s o c i a t e d  P D F  c o n t e n t\nb .  U s e  t h e  G e m i n i  A P I  t o  g e n e r a t e  a  r e s p o n s e  b a s e d  o n  t h e  P D F  \nc o n t e n t  a n d  u s e r  q u e r y\n1. Initialize the Gemini API client using the securely stored API\nkey.\n2. Develop a function to generate context-aware prompts based on PDF\ncontent and user queries.\n3. Implement error handling for API rate limits, timeouts, and other\npotential issues.\n4. Consider implementing caching mechanisms to improve response times\nfor frequently asked questions.  (Optional)\nProblem 1:  Is using the Gemini 1.5 Flash that has 1 Million\ncontext size enough or Retrieval-Augmented Generation (RAG) is a\nbetter approach?\nProblem 2:  Having 1 Million context size is great but output\ntokens are limited to 8196, how would you queries that has more\nthan 8196 tokens?\nProblem 3:  Writing unit tests are great for ensuring the app works\njust fine, but how would you evaluate the performance of the Large\nLanguage Model?\nEnsure that all API responses include meaningful error messages and\nappropriate HTTP status codes for various error scenarios.\n2.6 Testing\nMake sure you add some tests to ensure\n2.7 Documentation\nProvide comprehensive documentation for the project:\nEnsure all documentation is clear, concise, and kept up-to-date with\nany changes to the project.\nEvaluation Criteria1. Develop a custom error handling middleware for FastAPI to catch\nand process exceptions.\n2. Implement detailed logging for all critical operations, including\nPDF processing, API calls, and state management.\n3. Use a structured logging format (e.g., JSON) for easy parsing and\nanalysis. ( Optional )\n4. Implement different log levels ( DEBUG, INFO, WARNING, ERROR) for\ngranular control over log output. ( Optional )\n1. Unit tests for individual components (e.g., PDF processing, Gemini\nAPI integration, state management).\n2. Integration tests to verify the entire application flow, including\nAPI endpoints and error handling.\n1. Develop a comprehensive README.md file including:\nProject overview\nDetailed setup instructions, including environment\nconfiguration\nExplanation of API endpoints with request/response examples\nTesting procedures and instructions for running the test suite\nCriteria Description Weight\nFunctionality Correct implementation of all required \nfeatures40%\nCode Quality Clean, readable code following Python best \npractices25%\nAPI Design Well-structured endpoints and appropriate \nuse of HTTP methods20%\nDocumentation Clear and complete documentation, including \nAPI docs and setup instructions10%\nError \nHandlingRobust error handling and informative error \nmessages5%\nTip (Bonus Points!)\nYou can use any library that will help you with the task, including\nbut not limited to:\nAdditional Considerations\nDeadline : Please submit your completed project within 7 days of\nreceiving this challenge.\nNote: While we appreciate timely submissions, we value quality over\nspeed. Take the time you need to showcase your best work!\nGood luck! We look forward to reviewing your submission.\nNeed any help?\nFeel free to reach out to directly from elif@sevenapps.co  if you have\nany questions or need any help.Langchain\nSee: https://python.langchain.com/\nLLama-Index\nSee: https://docs.llamaindex.ai/",
      "created_at": "2024-11-25T23:59:46.815096"
    },
    "24d60f28-c07e-4d9a-a1d0-495ac0fbd67a": {
      "pdf_id": "24d60f28-c07e-4d9a-a1d0-495ac0fbd67a",
      "filename": "filetosent.pdf",
      "path": "uploads\\24d60f28-c07e-4d9a-a1d0-495ac0fbd67a.pdf",
      "extracted_text": "SevenApps Backend Developer Take-Home\nChallange: PDF Chat API\nOverview\nThis is designed to thoroughly assess your skills in Python\nprogramming, API development, integration with external services,\nusing Large Language Models and to understand your problem-solving\nskills .\nIn this challenge, you'll be tasked with building a FastAPI\napplication that enables users to interact with PDF files and being\nable to chat with it!\nProject Description\nYour primary objective is to develop a sophisticated FastAPI\napplication that serves as the backbone of a PDF chat service.\nThis application will provide robust endpoints for uploading PDF\ndocuments and\nThe core functionality of your application should encompass:\n1. Efficient uploading and processing of PDF documents\n2. Intelligent extraction and storage of text content and associated\nmetadata\n3. Seamless integration with the Gemini API for advanced natural\nlanguage processing\n4. Provision of an intuitive and responsive chat functionality based\non PDF content\n5. Implementation of comprehensive error handling and detailed\nlogging mechanisms\n6. Ensuring top-notch security measures and addressing scalability\nconcerns\n7. Optimizing performance for handling large volumes of data and\nconcurrent users\nDetailed Tasks\n1. Set up your Large Language Model (LLM)\nWhile we highly recommend leveraging Google's Gemini API for this\nproject due to its advanced capabilities and free tier, we understand\nthe importance of flexibility in choosing the right tools for the job.\nAs such, you have the liberty to select any state-of-the-art Large\nLanguage Model for inference. Here are some options to consider:\nFor the purposes of this comprehensive guide, we'll focus on setting\nup and utilizing the Gemini API, given its powerful features and\naccessibility.\n1.1 Setting up the Gemini API\nFollow these detailed steps to set up your Gemini API access:\nFor in-depth implementation instructions and best practices, we\nstrongly recommend referring to the Gemini API Python Quickstart\nDocumentation . This resource provides valuable insights into\ninitializing the API client, sending requests, and handling responses\neffectively.\n1.2 API Key ManagementGoogle Gemini API (recommended and free)\nLocal models using Ollama or LM Studio (free)\nOpenAI's GPT models (GPT-3.5, GPT-4)\nAnthropic's Claude\n1. Open your web browser and navigate to\nhttps://ai.google.dev/aistudio\n2. Sign in with your Google account. If you don't have one, you'll\nneed to create it.\n3. Once logged in, locate and click on the \"Create\" button in the\ntop-right corner of the page.\n4. From the dropdown menu, select \"API key\".\n5. A new API key will be generated. Carefully copy this key and store\nit securely.\nImplementing secure key management is crucial for maintaining the\nintegrity and security of your application. Follow these best\npractices:\n2 Chat With PDF API\n2.1 FastAPI Endpoint Implementation\nDevelop the following FastAPI endpoints to facilitate PDF upload and\nchat functionality:\n2.1.1 PDF Upload1. Utilize environment variables to store sensitive information,\nincluding API keys.\n2. Create a . e n v file in your project's root directory to securely\nstore your Gemini API key locally.\n3. Leverage a robust library like p y t h o n \u0000 d o t e n v to efficiently load\nenvironment variables in your application.\n4. Ensure that your . e n v file is explicitly added to your . g i t i g n o r e\nfile to prevent accidental exposure of sensitive information in\nversion control.\nRequest Method:  POST\nEndpoint:  / v 1 / p d f\nDescription:  Endpoint for uploading and registering a PDF\nInput:\nDescription:  Multipart form data containing the PDF file\nExample\nc u r l  - X  P O S T  \" h t t p : \u0000 \u0000 l o c a l h o s t : 8 0 0 0 / v 1 / p d f \"  \\\n- F  \" f \u0000 l e = @ / p a t h / t o / y o u r / p d f / f \u0000 l e . p d f \"\nOutput:\nDescription:  JSON response with the generated PDF ID\nExample\n{\n    \" p d f _ i d \" :  \" u n i q u e _ p d f _ i d e n t i f \u0000 e r \"\n2.1.2 Chat with PDF2.1.1.1 State Management\nImplement a robust state management system with the following\nfeatures:}\nProcess:\na .  V a l i d a t e  t h e  u p l o a d e d  f \u0000 l e  ( f \u0000 l e  t y p e ,  s i z e  l i m i t s )\nb .  G e n e r a t e  a  u n i q u e  i d e n t i f \u0000 e r  f o r  t h e  P D F\n1. Design a data structure to efficiently store PDF(s).\n2. Implement error handling to manage various PDF formats and\npotential parsing issues.\n3. Store extracted text along with associated metadata (e.g.,\nfilename, document ID, page count) in a structured format.\n4. Consider implementing text preprocessing techniques to enhance\nthe quality of extracted content.\nRequest Method:  POST\nEndpoint:  / v 1 / c h a t / { p d f _ i d }\nDescription:  Endpoint for interacting with a specific PDF\nInput: JSON body containing the user's message\n{\n    \" m e s s a g e \" :  \" W h a t  i s  t h e  m a i n  t o p i c  o f  t h i s  P D F ? \"\n}\nOutput: JSON response with the AI-generated answer\n{\n    \" r e s p o n s e \" :  \" T h e  m a i n  t o p i c  o f  t h i s  P D F  i s \u0000 \u0000 \u0000 \"\n}\nProcess:\n2.3 LLM Integration\nImplement seamless integration with the Gemini API for advanced\nnatural language processing:\nFor detailed implementation guidance, refer to the Gemini API\ndocumentation  and best practices for prompt engineering and API\nintegration.\nProblems to tackle (Bonus points!)\n2.5 Error Handling and Logging\nImplement comprehensive error handling and logging mechanisms:a .  V a l i d a t e  t h e  p d f _ i d  a n d  r e t r i e v e  t h e  a s s o c i a t e d  P D F  c o n t e n t\nb .  U s e  t h e  G e m i n i  A P I  t o  g e n e r a t e  a  r e s p o n s e  b a s e d  o n  t h e  P D F  \nc o n t e n t  a n d  u s e r  q u e r y\n1. Initialize the Gemini API client using the securely stored API\nkey.\n2. Develop a function to generate context-aware prompts based on PDF\ncontent and user queries.\n3. Implement error handling for API rate limits, timeouts, and other\npotential issues.\n4. Consider implementing caching mechanisms to improve response times\nfor frequently asked questions.  (Optional)\nProblem 1:  Is using the Gemini 1.5 Flash that has 1 Million\ncontext size enough or Retrieval-Augmented Generation (RAG) is a\nbetter approach?\nProblem 2:  Having 1 Million context size is great but output\ntokens are limited to 8196, how would you queries that has more\nthan 8196 tokens?\nProblem 3:  Writing unit tests are great for ensuring the app works\njust fine, but how would you evaluate the performance of the Large\nLanguage Model?\nEnsure that all API responses include meaningful error messages and\nappropriate HTTP status codes for various error scenarios.\n2.6 Testing\nMake sure you add some tests to ensure\n2.7 Documentation\nProvide comprehensive documentation for the project:\nEnsure all documentation is clear, concise, and kept up-to-date with\nany changes to the project.\nEvaluation Criteria1. Develop a custom error handling middleware for FastAPI to catch\nand process exceptions.\n2. Implement detailed logging for all critical operations, including\nPDF processing, API calls, and state management.\n3. Use a structured logging format (e.g., JSON) for easy parsing and\nanalysis. ( Optional )\n4. Implement different log levels ( DEBUG, INFO, WARNING, ERROR) for\ngranular control over log output. ( Optional )\n1. Unit tests for individual components (e.g., PDF processing, Gemini\nAPI integration, state management).\n2. Integration tests to verify the entire application flow, including\nAPI endpoints and error handling.\n1. Develop a comprehensive README.md file including:\nProject overview\nDetailed setup instructions, including environment\nconfiguration\nExplanation of API endpoints with request/response examples\nTesting procedures and instructions for running the test suite\nCriteria Description Weight\nFunctionality Correct implementation of all required \nfeatures40%\nCode Quality Clean, readable code following Python best \npractices25%\nAPI Design Well-structured endpoints and appropriate \nuse of HTTP methods20%\nDocumentation Clear and complete documentation, including \nAPI docs and setup instructions10%\nError \nHandlingRobust error handling and informative error \nmessages5%\nTip (Bonus Points!)\nYou can use any library that will help you with the task, including\nbut not limited to:\nAdditional Considerations\nDeadline : Please submit your completed project within 7 days of\nreceiving this challenge.\nNote: While we appreciate timely submissions, we value quality over\nspeed. Take the time you need to showcase your best work!\nGood luck! We look forward to reviewing your submission.\nNeed any help?\nFeel free to reach out to directly from elif@sevenapps.co  if you have\nany questions or need any help.Langchain\nSee: https://python.langchain.com/\nLLama-Index\nSee: https://docs.llamaindex.ai/",
      "created_at": "2024-11-27T14:38:12.795526"
    },
    "2dfdee0d-8940-4b60-b36e-1553f3291341": {
      "pdf_id": "2dfdee0d-8940-4b60-b36e-1553f3291341",
      "filename": "filetosent.pdf",
      "path": "uploads\\2dfdee0d-8940-4b60-b36e-1553f3291341.pdf",
      "extracted_text": "SevenApps Backend Developer Take-Home\nChallange: PDF Chat API\nOverview\nThis is designed to thoroughly assess your skills in Python\nprogramming, API development, integration with external services,\nusing Large Language Models and to understand your problem-solving\nskills .\nIn this challenge, you'll be tasked with building a FastAPI\napplication that enables users to interact with PDF files and being\nable to chat with it!\nProject Description\nYour primary objective is to develop a sophisticated FastAPI\napplication that serves as the backbone of a PDF chat service.\nThis application will provide robust endpoints for uploading PDF\ndocuments and\nThe core functionality of your application should encompass:\n1. Efficient uploading and processing of PDF documents\n2. Intelligent extraction and storage of text content and associated\nmetadata\n3. Seamless integration with the Gemini API for advanced natural\nlanguage processing\n4. Provision of an intuitive and responsive chat functionality based\non PDF content\n5. Implementation of comprehensive error handling and detailed\nlogging mechanisms\n6. Ensuring top-notch security measures and addressing scalability\nconcerns\n7. Optimizing performance for handling large volumes of data and\nconcurrent users\nDetailed Tasks\n1. Set up your Large Language Model (LLM)\nWhile we highly recommend leveraging Google's Gemini API for this\nproject due to its advanced capabilities and free tier, we understand\nthe importance of flexibility in choosing the right tools for the job.\nAs such, you have the liberty to select any state-of-the-art Large\nLanguage Model for inference. Here are some options to consider:\nFor the purposes of this comprehensive guide, we'll focus on setting\nup and utilizing the Gemini API, given its powerful features and\naccessibility.\n1.1 Setting up the Gemini API\nFollow these detailed steps to set up your Gemini API access:\nFor in-depth implementation instructions and best practices, we\nstrongly recommend referring to the Gemini API Python Quickstart\nDocumentation . This resource provides valuable insights into\ninitializing the API client, sending requests, and handling responses\neffectively.\n1.2 API Key ManagementGoogle Gemini API (recommended and free)\nLocal models using Ollama or LM Studio (free)\nOpenAI's GPT models (GPT-3.5, GPT-4)\nAnthropic's Claude\n1. Open your web browser and navigate to\nhttps://ai.google.dev/aistudio\n2. Sign in with your Google account. If you don't have one, you'll\nneed to create it.\n3. Once logged in, locate and click on the \"Create\" button in the\ntop-right corner of the page.\n4. From the dropdown menu, select \"API key\".\n5. A new API key will be generated. Carefully copy this key and store\nit securely.\nImplementing secure key management is crucial for maintaining the\nintegrity and security of your application. Follow these best\npractices:\n2 Chat With PDF API\n2.1 FastAPI Endpoint Implementation\nDevelop the following FastAPI endpoints to facilitate PDF upload and\nchat functionality:\n2.1.1 PDF Upload1. Utilize environment variables to store sensitive information,\nincluding API keys.\n2. Create a . e n v file in your project's root directory to securely\nstore your Gemini API key locally.\n3. Leverage a robust library like p y t h o n \u0000 d o t e n v to efficiently load\nenvironment variables in your application.\n4. Ensure that your . e n v file is explicitly added to your . g i t i g n o r e\nfile to prevent accidental exposure of sensitive information in\nversion control.\nRequest Method:  POST\nEndpoint:  / v 1 / p d f\nDescription:  Endpoint for uploading and registering a PDF\nInput:\nDescription:  Multipart form data containing the PDF file\nExample\nc u r l  - X  P O S T  \" h t t p : \u0000 \u0000 l o c a l h o s t : 8 0 0 0 / v 1 / p d f \"  \\\n- F  \" f \u0000 l e = @ / p a t h / t o / y o u r / p d f / f \u0000 l e . p d f \"\nOutput:\nDescription:  JSON response with the generated PDF ID\nExample\n{\n    \" p d f _ i d \" :  \" u n i q u e _ p d f _ i d e n t i f \u0000 e r \"\n2.1.2 Chat with PDF2.1.1.1 State Management\nImplement a robust state management system with the following\nfeatures:}\nProcess:\na .  V a l i d a t e  t h e  u p l o a d e d  f \u0000 l e  ( f \u0000 l e  t y p e ,  s i z e  l i m i t s )\nb .  G e n e r a t e  a  u n i q u e  i d e n t i f \u0000 e r  f o r  t h e  P D F\n1. Design a data structure to efficiently store PDF(s).\n2. Implement error handling to manage various PDF formats and\npotential parsing issues.\n3. Store extracted text along with associated metadata (e.g.,\nfilename, document ID, page count) in a structured format.\n4. Consider implementing text preprocessing techniques to enhance\nthe quality of extracted content.\nRequest Method:  POST\nEndpoint:  / v 1 / c h a t / { p d f _ i d }\nDescription:  Endpoint for interacting with a specific PDF\nInput: JSON body containing the user's message\n{\n    \" m e s s a g e \" :  \" W h a t  i s  t h e  m a i n  t o p i c  o f  t h i s  P D F ? \"\n}\nOutput: JSON response with the AI-generated answer\n{\n    \" r e s p o n s e \" :  \" T h e  m a i n  t o p i c  o f  t h i s  P D F  i s \u0000 \u0000 \u0000 \"\n}\nProcess:\n2.3 LLM Integration\nImplement seamless integration with the Gemini API for advanced\nnatural language processing:\nFor detailed implementation guidance, refer to the Gemini API\ndocumentation  and best practices for prompt engineering and API\nintegration.\nProblems to tackle (Bonus points!)\n2.5 Error Handling and Logging\nImplement comprehensive error handling and logging mechanisms:a .  V a l i d a t e  t h e  p d f _ i d  a n d  r e t r i e v e  t h e  a s s o c i a t e d  P D F  c o n t e n t\nb .  U s e  t h e  G e m i n i  A P I  t o  g e n e r a t e  a  r e s p o n s e  b a s e d  o n  t h e  P D F  \nc o n t e n t  a n d  u s e r  q u e r y\n1. Initialize the Gemini API client using the securely stored API\nkey.\n2. Develop a function to generate context-aware prompts based on PDF\ncontent and user queries.\n3. Implement error handling for API rate limits, timeouts, and other\npotential issues.\n4. Consider implementing caching mechanisms to improve response times\nfor frequently asked questions.  (Optional)\nProblem 1:  Is using the Gemini 1.5 Flash that has 1 Million\ncontext size enough or Retrieval-Augmented Generation (RAG) is a\nbetter approach?\nProblem 2:  Having 1 Million context size is great but output\ntokens are limited to 8196, how would you queries that has more\nthan 8196 tokens?\nProblem 3:  Writing unit tests are great for ensuring the app works\njust fine, but how would you evaluate the performance of the Large\nLanguage Model?\nEnsure that all API responses include meaningful error messages and\nappropriate HTTP status codes for various error scenarios.\n2.6 Testing\nMake sure you add some tests to ensure\n2.7 Documentation\nProvide comprehensive documentation for the project:\nEnsure all documentation is clear, concise, and kept up-to-date with\nany changes to the project.\nEvaluation Criteria1. Develop a custom error handling middleware for FastAPI to catch\nand process exceptions.\n2. Implement detailed logging for all critical operations, including\nPDF processing, API calls, and state management.\n3. Use a structured logging format (e.g., JSON) for easy parsing and\nanalysis. ( Optional )\n4. Implement different log levels ( DEBUG, INFO, WARNING, ERROR) for\ngranular control over log output. ( Optional )\n1. Unit tests for individual components (e.g., PDF processing, Gemini\nAPI integration, state management).\n2. Integration tests to verify the entire application flow, including\nAPI endpoints and error handling.\n1. Develop a comprehensive README.md file including:\nProject overview\nDetailed setup instructions, including environment\nconfiguration\nExplanation of API endpoints with request/response examples\nTesting procedures and instructions for running the test suite\nCriteria Description Weight\nFunctionality Correct implementation of all required \nfeatures40%\nCode Quality Clean, readable code following Python best \npractices25%\nAPI Design Well-structured endpoints and appropriate \nuse of HTTP methods20%\nDocumentation Clear and complete documentation, including \nAPI docs and setup instructions10%\nError \nHandlingRobust error handling and informative error \nmessages5%\nTip (Bonus Points!)\nYou can use any library that will help you with the task, including\nbut not limited to:\nAdditional Considerations\nDeadline : Please submit your completed project within 7 days of\nreceiving this challenge.\nNote: While we appreciate timely submissions, we value quality over\nspeed. Take the time you need to showcase your best work!\nGood luck! We look forward to reviewing your submission.\nNeed any help?\nFeel free to reach out to directly from elif@sevenapps.co  if you have\nany questions or need any help.Langchain\nSee: https://python.langchain.com/\nLLama-Index\nSee: https://docs.llamaindex.ai/",
      "created_at": "2024-11-27T14:56:56.162357"
    },
    "b3ce960b-5d90-4866-bede-0a1ea0df9180": {
      "pdf_id": "b3ce960b-5d90-4866-bede-0a1ea0df9180",
      "filename": "filetosent.pdf",
      "path": "uploads\\b3ce960b-5d90-4866-bede-0a1ea0df9180.pdf",
      "extracted_text": "SevenApps Backend Developer Take-Home\nChallange: PDF Chat API\nOverview\nThis is designed to thoroughly assess your skills in Python\nprogramming, API development, integration with external services,\nusing Large Language Models and to understand your problem-solving\nskills .\nIn this challenge, you'll be tasked with building a FastAPI\napplication that enables users to interact with PDF files and being\nable to chat with it!\nProject Description\nYour primary objective is to develop a sophisticated FastAPI\napplication that serves as the backbone of a PDF chat service.\nThis application will provide robust endpoints for uploading PDF\ndocuments and\nThe core functionality of your application should encompass:\n1. Efficient uploading and processing of PDF documents\n2. Intelligent extraction and storage of text content and associated\nmetadata\n3. Seamless integration with the Gemini API for advanced natural\nlanguage processing\n4. Provision of an intuitive and responsive chat functionality based\non PDF content\n5. Implementation of comprehensive error handling and detailed\nlogging mechanisms\n6. Ensuring top-notch security measures and addressing scalability\nconcerns\n7. Optimizing performance for handling large volumes of data and\nconcurrent users\nDetailed Tasks\n1. Set up your Large Language Model (LLM)\nWhile we highly recommend leveraging Google's Gemini API for this\nproject due to its advanced capabilities and free tier, we understand\nthe importance of flexibility in choosing the right tools for the job.\nAs such, you have the liberty to select any state-of-the-art Large\nLanguage Model for inference. Here are some options to consider:\nFor the purposes of this comprehensive guide, we'll focus on setting\nup and utilizing the Gemini API, given its powerful features and\naccessibility.\n1.1 Setting up the Gemini API\nFollow these detailed steps to set up your Gemini API access:\nFor in-depth implementation instructions and best practices, we\nstrongly recommend referring to the Gemini API Python Quickstart\nDocumentation . This resource provides valuable insights into\ninitializing the API client, sending requests, and handling responses\neffectively.\n1.2 API Key ManagementGoogle Gemini API (recommended and free)\nLocal models using Ollama or LM Studio (free)\nOpenAI's GPT models (GPT-3.5, GPT-4)\nAnthropic's Claude\n1. Open your web browser and navigate to\nhttps://ai.google.dev/aistudio\n2. Sign in with your Google account. If you don't have one, you'll\nneed to create it.\n3. Once logged in, locate and click on the \"Create\" button in the\ntop-right corner of the page.\n4. From the dropdown menu, select \"API key\".\n5. A new API key will be generated. Carefully copy this key and store\nit securely.\nImplementing secure key management is crucial for maintaining the\nintegrity and security of your application. Follow these best\npractices:\n2 Chat With PDF API\n2.1 FastAPI Endpoint Implementation\nDevelop the following FastAPI endpoints to facilitate PDF upload and\nchat functionality:\n2.1.1 PDF Upload1. Utilize environment variables to store sensitive information,\nincluding API keys.\n2. Create a . e n v file in your project's root directory to securely\nstore your Gemini API key locally.\n3. Leverage a robust library like p y t h o n \u0000 d o t e n v to efficiently load\nenvironment variables in your application.\n4. Ensure that your . e n v file is explicitly added to your . g i t i g n o r e\nfile to prevent accidental exposure of sensitive information in\nversion control.\nRequest Method:  POST\nEndpoint:  / v 1 / p d f\nDescription:  Endpoint for uploading and registering a PDF\nInput:\nDescription:  Multipart form data containing the PDF file\nExample\nc u r l  - X  P O S T  \" h t t p : \u0000 \u0000 l o c a l h o s t : 8 0 0 0 / v 1 / p d f \"  \\\n- F  \" f \u0000 l e = @ / p a t h / t o / y o u r / p d f / f \u0000 l e . p d f \"\nOutput:\nDescription:  JSON response with the generated PDF ID\nExample\n{\n    \" p d f _ i d \" :  \" u n i q u e _ p d f _ i d e n t i f \u0000 e r \"\n2.1.2 Chat with PDF2.1.1.1 State Management\nImplement a robust state management system with the following\nfeatures:}\nProcess:\na .  V a l i d a t e  t h e  u p l o a d e d  f \u0000 l e  ( f \u0000 l e  t y p e ,  s i z e  l i m i t s )\nb .  G e n e r a t e  a  u n i q u e  i d e n t i f \u0000 e r  f o r  t h e  P D F\n1. Design a data structure to efficiently store PDF(s).\n2. Implement error handling to manage various PDF formats and\npotential parsing issues.\n3. Store extracted text along with associated metadata (e.g.,\nfilename, document ID, page count) in a structured format.\n4. Consider implementing text preprocessing techniques to enhance\nthe quality of extracted content.\nRequest Method:  POST\nEndpoint:  / v 1 / c h a t / { p d f _ i d }\nDescription:  Endpoint for interacting with a specific PDF\nInput: JSON body containing the user's message\n{\n    \" m e s s a g e \" :  \" W h a t  i s  t h e  m a i n  t o p i c  o f  t h i s  P D F ? \"\n}\nOutput: JSON response with the AI-generated answer\n{\n    \" r e s p o n s e \" :  \" T h e  m a i n  t o p i c  o f  t h i s  P D F  i s \u0000 \u0000 \u0000 \"\n}\nProcess:\n2.3 LLM Integration\nImplement seamless integration with the Gemini API for advanced\nnatural language processing:\nFor detailed implementation guidance, refer to the Gemini API\ndocumentation  and best practices for prompt engineering and API\nintegration.\nProblems to tackle (Bonus points!)\n2.5 Error Handling and Logging\nImplement comprehensive error handling and logging mechanisms:a .  V a l i d a t e  t h e  p d f _ i d  a n d  r e t r i e v e  t h e  a s s o c i a t e d  P D F  c o n t e n t\nb .  U s e  t h e  G e m i n i  A P I  t o  g e n e r a t e  a  r e s p o n s e  b a s e d  o n  t h e  P D F  \nc o n t e n t  a n d  u s e r  q u e r y\n1. Initialize the Gemini API client using the securely stored API\nkey.\n2. Develop a function to generate context-aware prompts based on PDF\ncontent and user queries.\n3. Implement error handling for API rate limits, timeouts, and other\npotential issues.\n4. Consider implementing caching mechanisms to improve response times\nfor frequently asked questions.  (Optional)\nProblem 1:  Is using the Gemini 1.5 Flash that has 1 Million\ncontext size enough or Retrieval-Augmented Generation (RAG) is a\nbetter approach?\nProblem 2:  Having 1 Million context size is great but output\ntokens are limited to 8196, how would you queries that has more\nthan 8196 tokens?\nProblem 3:  Writing unit tests are great for ensuring the app works\njust fine, but how would you evaluate the performance of the Large\nLanguage Model?\nEnsure that all API responses include meaningful error messages and\nappropriate HTTP status codes for various error scenarios.\n2.6 Testing\nMake sure you add some tests to ensure\n2.7 Documentation\nProvide comprehensive documentation for the project:\nEnsure all documentation is clear, concise, and kept up-to-date with\nany changes to the project.\nEvaluation Criteria1. Develop a custom error handling middleware for FastAPI to catch\nand process exceptions.\n2. Implement detailed logging for all critical operations, including\nPDF processing, API calls, and state management.\n3. Use a structured logging format (e.g., JSON) for easy parsing and\nanalysis. ( Optional )\n4. Implement different log levels ( DEBUG, INFO, WARNING, ERROR) for\ngranular control over log output. ( Optional )\n1. Unit tests for individual components (e.g., PDF processing, Gemini\nAPI integration, state management).\n2. Integration tests to verify the entire application flow, including\nAPI endpoints and error handling.\n1. Develop a comprehensive README.md file including:\nProject overview\nDetailed setup instructions, including environment\nconfiguration\nExplanation of API endpoints with request/response examples\nTesting procedures and instructions for running the test suite\nCriteria Description Weight\nFunctionality Correct implementation of all required \nfeatures40%\nCode Quality Clean, readable code following Python best \npractices25%\nAPI Design Well-structured endpoints and appropriate \nuse of HTTP methods20%\nDocumentation Clear and complete documentation, including \nAPI docs and setup instructions10%\nError \nHandlingRobust error handling and informative error \nmessages5%\nTip (Bonus Points!)\nYou can use any library that will help you with the task, including\nbut not limited to:\nAdditional Considerations\nDeadline : Please submit your completed project within 7 days of\nreceiving this challenge.\nNote: While we appreciate timely submissions, we value quality over\nspeed. Take the time you need to showcase your best work!\nGood luck! We look forward to reviewing your submission.\nNeed any help?\nFeel free to reach out to directly from elif@sevenapps.co  if you have\nany questions or need any help.Langchain\nSee: https://python.langchain.com/\nLLama-Index\nSee: https://docs.llamaindex.ai/",
      "created_at": "2024-11-27T15:32:54.042550"
    },
    "cfe196df-1c36-47c0-8bd0-f71a0244917c": {
      "pdf_id": "cfe196df-1c36-47c0-8bd0-f71a0244917c",
      "filename": "filetosent.pdf",
      "path": "uploads\\cfe196df-1c36-47c0-8bd0-f71a0244917c.pdf",
      "extracted_text": "SevenApps Backend Developer Take-Home\nChallange: PDF Chat API\nOverview\nThis is designed to thoroughly assess your skills in Python\nprogramming, API development, integration with external services,\nusing Large Language Models and to understand your problem-solving\nskills .\nIn this challenge, you'll be tasked with building a FastAPI\napplication that enables users to interact with PDF files and being\nable to chat with it!\nProject Description\nYour primary objective is to develop a sophisticated FastAPI\napplication that serves as the backbone of a PDF chat service.\nThis application will provide robust endpoints for uploading PDF\ndocuments and\nThe core functionality of your application should encompass:\n1. Efficient uploading and processing of PDF documents\n2. Intelligent extraction and storage of text content and associated\nmetadata\n3. Seamless integration with the Gemini API for advanced natural\nlanguage processing\n4. Provision of an intuitive and responsive chat functionality based\non PDF content\n5. Implementation of comprehensive error handling and detailed\nlogging mechanisms\n6. Ensuring top-notch security measures and addressing scalability\nconcerns\n7. Optimizing performance for handling large volumes of data and\nconcurrent users\nDetailed Tasks\n1. Set up your Large Language Model (LLM)\nWhile we highly recommend leveraging Google's Gemini API for this\nproject due to its advanced capabilities and free tier, we understand\nthe importance of flexibility in choosing the right tools for the job.\nAs such, you have the liberty to select any state-of-the-art Large\nLanguage Model for inference. Here are some options to consider:\nFor the purposes of this comprehensive guide, we'll focus on setting\nup and utilizing the Gemini API, given its powerful features and\naccessibility.\n1.1 Setting up the Gemini API\nFollow these detailed steps to set up your Gemini API access:\nFor in-depth implementation instructions and best practices, we\nstrongly recommend referring to the Gemini API Python Quickstart\nDocumentation . This resource provides valuable insights into\ninitializing the API client, sending requests, and handling responses\neffectively.\n1.2 API Key ManagementGoogle Gemini API (recommended and free)\nLocal models using Ollama or LM Studio (free)\nOpenAI's GPT models (GPT-3.5, GPT-4)\nAnthropic's Claude\n1. Open your web browser and navigate to\nhttps://ai.google.dev/aistudio\n2. Sign in with your Google account. If you don't have one, you'll\nneed to create it.\n3. Once logged in, locate and click on the \"Create\" button in the\ntop-right corner of the page.\n4. From the dropdown menu, select \"API key\".\n5. A new API key will be generated. Carefully copy this key and store\nit securely.\nImplementing secure key management is crucial for maintaining the\nintegrity and security of your application. Follow these best\npractices:\n2 Chat With PDF API\n2.1 FastAPI Endpoint Implementation\nDevelop the following FastAPI endpoints to facilitate PDF upload and\nchat functionality:\n2.1.1 PDF Upload1. Utilize environment variables to store sensitive information,\nincluding API keys.\n2. Create a . e n v file in your project's root directory to securely\nstore your Gemini API key locally.\n3. Leverage a robust library like p y t h o n \u0000 d o t e n v to efficiently load\nenvironment variables in your application.\n4. Ensure that your . e n v file is explicitly added to your . g i t i g n o r e\nfile to prevent accidental exposure of sensitive information in\nversion control.\nRequest Method:  POST\nEndpoint:  / v 1 / p d f\nDescription:  Endpoint for uploading and registering a PDF\nInput:\nDescription:  Multipart form data containing the PDF file\nExample\nc u r l  - X  P O S T  \" h t t p : \u0000 \u0000 l o c a l h o s t : 8 0 0 0 / v 1 / p d f \"  \\\n- F  \" f \u0000 l e = @ / p a t h / t o / y o u r / p d f / f \u0000 l e . p d f \"\nOutput:\nDescription:  JSON response with the generated PDF ID\nExample\n{\n    \" p d f _ i d \" :  \" u n i q u e _ p d f _ i d e n t i f \u0000 e r \"\n2.1.2 Chat with PDF2.1.1.1 State Management\nImplement a robust state management system with the following\nfeatures:}\nProcess:\na .  V a l i d a t e  t h e  u p l o a d e d  f \u0000 l e  ( f \u0000 l e  t y p e ,  s i z e  l i m i t s )\nb .  G e n e r a t e  a  u n i q u e  i d e n t i f \u0000 e r  f o r  t h e  P D F\n1. Design a data structure to efficiently store PDF(s).\n2. Implement error handling to manage various PDF formats and\npotential parsing issues.\n3. Store extracted text along with associated metadata (e.g.,\nfilename, document ID, page count) in a structured format.\n4. Consider implementing text preprocessing techniques to enhance\nthe quality of extracted content.\nRequest Method:  POST\nEndpoint:  / v 1 / c h a t / { p d f _ i d }\nDescription:  Endpoint for interacting with a specific PDF\nInput: JSON body containing the user's message\n{\n    \" m e s s a g e \" :  \" W h a t  i s  t h e  m a i n  t o p i c  o f  t h i s  P D F ? \"\n}\nOutput: JSON response with the AI-generated answer\n{\n    \" r e s p o n s e \" :  \" T h e  m a i n  t o p i c  o f  t h i s  P D F  i s \u0000 \u0000 \u0000 \"\n}\nProcess:\n2.3 LLM Integration\nImplement seamless integration with the Gemini API for advanced\nnatural language processing:\nFor detailed implementation guidance, refer to the Gemini API\ndocumentation  and best practices for prompt engineering and API\nintegration.\nProblems to tackle (Bonus points!)\n2.5 Error Handling and Logging\nImplement comprehensive error handling and logging mechanisms:a .  V a l i d a t e  t h e  p d f _ i d  a n d  r e t r i e v e  t h e  a s s o c i a t e d  P D F  c o n t e n t\nb .  U s e  t h e  G e m i n i  A P I  t o  g e n e r a t e  a  r e s p o n s e  b a s e d  o n  t h e  P D F  \nc o n t e n t  a n d  u s e r  q u e r y\n1. Initialize the Gemini API client using the securely stored API\nkey.\n2. Develop a function to generate context-aware prompts based on PDF\ncontent and user queries.\n3. Implement error handling for API rate limits, timeouts, and other\npotential issues.\n4. Consider implementing caching mechanisms to improve response times\nfor frequently asked questions.  (Optional)\nProblem 1:  Is using the Gemini 1.5 Flash that has 1 Million\ncontext size enough or Retrieval-Augmented Generation (RAG) is a\nbetter approach?\nProblem 2:  Having 1 Million context size is great but output\ntokens are limited to 8196, how would you queries that has more\nthan 8196 tokens?\nProblem 3:  Writing unit tests are great for ensuring the app works\njust fine, but how would you evaluate the performance of the Large\nLanguage Model?\nEnsure that all API responses include meaningful error messages and\nappropriate HTTP status codes for various error scenarios.\n2.6 Testing\nMake sure you add some tests to ensure\n2.7 Documentation\nProvide comprehensive documentation for the project:\nEnsure all documentation is clear, concise, and kept up-to-date with\nany changes to the project.\nEvaluation Criteria1. Develop a custom error handling middleware for FastAPI to catch\nand process exceptions.\n2. Implement detailed logging for all critical operations, including\nPDF processing, API calls, and state management.\n3. Use a structured logging format (e.g., JSON) for easy parsing and\nanalysis. ( Optional )\n4. Implement different log levels ( DEBUG, INFO, WARNING, ERROR) for\ngranular control over log output. ( Optional )\n1. Unit tests for individual components (e.g., PDF processing, Gemini\nAPI integration, state management).\n2. Integration tests to verify the entire application flow, including\nAPI endpoints and error handling.\n1. Develop a comprehensive README.md file including:\nProject overview\nDetailed setup instructions, including environment\nconfiguration\nExplanation of API endpoints with request/response examples\nTesting procedures and instructions for running the test suite\nCriteria Description Weight\nFunctionality Correct implementation of all required \nfeatures40%\nCode Quality Clean, readable code following Python best \npractices25%\nAPI Design Well-structured endpoints and appropriate \nuse of HTTP methods20%\nDocumentation Clear and complete documentation, including \nAPI docs and setup instructions10%\nError \nHandlingRobust error handling and informative error \nmessages5%\nTip (Bonus Points!)\nYou can use any library that will help you with the task, including\nbut not limited to:\nAdditional Considerations\nDeadline : Please submit your completed project within 7 days of\nreceiving this challenge.\nNote: While we appreciate timely submissions, we value quality over\nspeed. Take the time you need to showcase your best work!\nGood luck! We look forward to reviewing your submission.\nNeed any help?\nFeel free to reach out to directly from elif@sevenapps.co  if you have\nany questions or need any help.Langchain\nSee: https://python.langchain.com/\nLLama-Index\nSee: https://docs.llamaindex.ai/",
      "created_at": "2024-11-27T16:48:14.094586"
    },
    "3d1f5336-806c-4b78-ba2c-b7b58e67f471": {
      "pdf_id": "3d1f5336-806c-4b78-ba2c-b7b58e67f471",
      "filename": "filetosent.pdf",
      "path": "uploads\\3d1f5336-806c-4b78-ba2c-b7b58e67f471.pdf",
      "extracted_text": "SevenApps Backend Developer Take-Home\nChallange: PDF Chat API\nOverview\nThis is designed to thoroughly assess your skills in Python\nprogramming, API development, integration with external services,\nusing Large Language Models and to understand your problem-solving\nskills .\nIn this challenge, you'll be tasked with building a FastAPI\napplication that enables users to interact with PDF files and being\nable to chat with it!\nProject Description\nYour primary objective is to develop a sophisticated FastAPI\napplication that serves as the backbone of a PDF chat service.\nThis application will provide robust endpoints for uploading PDF\ndocuments and\nThe core functionality of your application should encompass:\n1. Efficient uploading and processing of PDF documents\n2. Intelligent extraction and storage of text content and associated\nmetadata\n3. Seamless integration with the Gemini API for advanced natural\nlanguage processing\n4. Provision of an intuitive and responsive chat functionality based\non PDF content\n5. Implementation of comprehensive error handling and detailed\nlogging mechanisms\n6. Ensuring top-notch security measures and addressing scalability\nconcerns\n7. Optimizing performance for handling large volumes of data and\nconcurrent users\nDetailed Tasks\n1. Set up your Large Language Model (LLM)\nWhile we highly recommend leveraging Google's Gemini API for this\nproject due to its advanced capabilities and free tier, we understand\nthe importance of flexibility in choosing the right tools for the job.\nAs such, you have the liberty to select any state-of-the-art Large\nLanguage Model for inference. Here are some options to consider:\nFor the purposes of this comprehensive guide, we'll focus on setting\nup and utilizing the Gemini API, given its powerful features and\naccessibility.\n1.1 Setting up the Gemini API\nFollow these detailed steps to set up your Gemini API access:\nFor in-depth implementation instructions and best practices, we\nstrongly recommend referring to the Gemini API Python Quickstart\nDocumentation . This resource provides valuable insights into\ninitializing the API client, sending requests, and handling responses\neffectively.\n1.2 API Key ManagementGoogle Gemini API (recommended and free)\nLocal models using Ollama or LM Studio (free)\nOpenAI's GPT models (GPT-3.5, GPT-4)\nAnthropic's Claude\n1. Open your web browser and navigate to\nhttps://ai.google.dev/aistudio\n2. Sign in with your Google account. If you don't have one, you'll\nneed to create it.\n3. Once logged in, locate and click on the \"Create\" button in the\ntop-right corner of the page.\n4. From the dropdown menu, select \"API key\".\n5. A new API key will be generated. Carefully copy this key and store\nit securely.\nImplementing secure key management is crucial for maintaining the\nintegrity and security of your application. Follow these best\npractices:\n2 Chat With PDF API\n2.1 FastAPI Endpoint Implementation\nDevelop the following FastAPI endpoints to facilitate PDF upload and\nchat functionality:\n2.1.1 PDF Upload1. Utilize environment variables to store sensitive information,\nincluding API keys.\n2. Create a . e n v file in your project's root directory to securely\nstore your Gemini API key locally.\n3. Leverage a robust library like p y t h o n \u0000 d o t e n v to efficiently load\nenvironment variables in your application.\n4. Ensure that your . e n v file is explicitly added to your . g i t i g n o r e\nfile to prevent accidental exposure of sensitive information in\nversion control.\nRequest Method:  POST\nEndpoint:  / v 1 / p d f\nDescription:  Endpoint for uploading and registering a PDF\nInput:\nDescription:  Multipart form data containing the PDF file\nExample\nc u r l  - X  P O S T  \" h t t p : \u0000 \u0000 l o c a l h o s t : 8 0 0 0 / v 1 / p d f \"  \\\n- F  \" f \u0000 l e = @ / p a t h / t o / y o u r / p d f / f \u0000 l e . p d f \"\nOutput:\nDescription:  JSON response with the generated PDF ID\nExample\n{\n    \" p d f _ i d \" :  \" u n i q u e _ p d f _ i d e n t i f \u0000 e r \"\n2.1.2 Chat with PDF2.1.1.1 State Management\nImplement a robust state management system with the following\nfeatures:}\nProcess:\na .  V a l i d a t e  t h e  u p l o a d e d  f \u0000 l e  ( f \u0000 l e  t y p e ,  s i z e  l i m i t s )\nb .  G e n e r a t e  a  u n i q u e  i d e n t i f \u0000 e r  f o r  t h e  P D F\n1. Design a data structure to efficiently store PDF(s).\n2. Implement error handling to manage various PDF formats and\npotential parsing issues.\n3. Store extracted text along with associated metadata (e.g.,\nfilename, document ID, page count) in a structured format.\n4. Consider implementing text preprocessing techniques to enhance\nthe quality of extracted content.\nRequest Method:  POST\nEndpoint:  / v 1 / c h a t / { p d f _ i d }\nDescription:  Endpoint for interacting with a specific PDF\nInput: JSON body containing the user's message\n{\n    \" m e s s a g e \" :  \" W h a t  i s  t h e  m a i n  t o p i c  o f  t h i s  P D F ? \"\n}\nOutput: JSON response with the AI-generated answer\n{\n    \" r e s p o n s e \" :  \" T h e  m a i n  t o p i c  o f  t h i s  P D F  i s \u0000 \u0000 \u0000 \"\n}\nProcess:\n2.3 LLM Integration\nImplement seamless integration with the Gemini API for advanced\nnatural language processing:\nFor detailed implementation guidance, refer to the Gemini API\ndocumentation  and best practices for prompt engineering and API\nintegration.\nProblems to tackle (Bonus points!)\n2.5 Error Handling and Logging\nImplement comprehensive error handling and logging mechanisms:a .  V a l i d a t e  t h e  p d f _ i d  a n d  r e t r i e v e  t h e  a s s o c i a t e d  P D F  c o n t e n t\nb .  U s e  t h e  G e m i n i  A P I  t o  g e n e r a t e  a  r e s p o n s e  b a s e d  o n  t h e  P D F  \nc o n t e n t  a n d  u s e r  q u e r y\n1. Initialize the Gemini API client using the securely stored API\nkey.\n2. Develop a function to generate context-aware prompts based on PDF\ncontent and user queries.\n3. Implement error handling for API rate limits, timeouts, and other\npotential issues.\n4. Consider implementing caching mechanisms to improve response times\nfor frequently asked questions.  (Optional)\nProblem 1:  Is using the Gemini 1.5 Flash that has 1 Million\ncontext size enough or Retrieval-Augmented Generation (RAG) is a\nbetter approach?\nProblem 2:  Having 1 Million context size is great but output\ntokens are limited to 8196, how would you queries that has more\nthan 8196 tokens?\nProblem 3:  Writing unit tests are great for ensuring the app works\njust fine, but how would you evaluate the performance of the Large\nLanguage Model?\nEnsure that all API responses include meaningful error messages and\nappropriate HTTP status codes for various error scenarios.\n2.6 Testing\nMake sure you add some tests to ensure\n2.7 Documentation\nProvide comprehensive documentation for the project:\nEnsure all documentation is clear, concise, and kept up-to-date with\nany changes to the project.\nEvaluation Criteria1. Develop a custom error handling middleware for FastAPI to catch\nand process exceptions.\n2. Implement detailed logging for all critical operations, including\nPDF processing, API calls, and state management.\n3. Use a structured logging format (e.g., JSON) for easy parsing and\nanalysis. ( Optional )\n4. Implement different log levels ( DEBUG, INFO, WARNING, ERROR) for\ngranular control over log output. ( Optional )\n1. Unit tests for individual components (e.g., PDF processing, Gemini\nAPI integration, state management).\n2. Integration tests to verify the entire application flow, including\nAPI endpoints and error handling.\n1. Develop a comprehensive README.md file including:\nProject overview\nDetailed setup instructions, including environment\nconfiguration\nExplanation of API endpoints with request/response examples\nTesting procedures and instructions for running the test suite\nCriteria Description Weight\nFunctionality Correct implementation of all required \nfeatures40%\nCode Quality Clean, readable code following Python best \npractices25%\nAPI Design Well-structured endpoints and appropriate \nuse of HTTP methods20%\nDocumentation Clear and complete documentation, including \nAPI docs and setup instructions10%\nError \nHandlingRobust error handling and informative error \nmessages5%\nTip (Bonus Points!)\nYou can use any library that will help you with the task, including\nbut not limited to:\nAdditional Considerations\nDeadline : Please submit your completed project within 7 days of\nreceiving this challenge.\nNote: While we appreciate timely submissions, we value quality over\nspeed. Take the time you need to showcase your best work!\nGood luck! We look forward to reviewing your submission.\nNeed any help?\nFeel free to reach out to directly from elif@sevenapps.co  if you have\nany questions or need any help.Langchain\nSee: https://python.langchain.com/\nLLama-Index\nSee: https://docs.llamaindex.ai/",
      "created_at": "2024-11-27T16:50:16.518216"
    },
    "b3c924a4-e0c4-4ffb-87d4-eddb0f489a73": {
      "pdf_id": "b3c924a4-e0c4-4ffb-87d4-eddb0f489a73",
      "filename": "filetosent.pdf",
      "path": "uploads\\b3c924a4-e0c4-4ffb-87d4-eddb0f489a73.pdf",
      "extracted_text": "SevenApps Backend Developer Take-Home\nChallange: PDF Chat API\nOverview\nThis is designed to thoroughly assess your skills in Python\nprogramming, API development, integration with external services,\nusing Large Language Models and to understand your problem-solving\nskills .\nIn this challenge, you'll be tasked with building a FastAPI\napplication that enables users to interact with PDF files and being\nable to chat with it!\nProject Description\nYour primary objective is to develop a sophisticated FastAPI\napplication that serves as the backbone of a PDF chat service.\nThis application will provide robust endpoints for uploading PDF\ndocuments and\nThe core functionality of your application should encompass:\n1. Efficient uploading and processing of PDF documents\n2. Intelligent extraction and storage of text content and associated\nmetadata\n3. Seamless integration with the Gemini API for advanced natural\nlanguage processing\n4. Provision of an intuitive and responsive chat functionality based\non PDF content\n5. Implementation of comprehensive error handling and detailed\nlogging mechanisms\n6. Ensuring top-notch security measures and addressing scalability\nconcerns\n7. Optimizing performance for handling large volumes of data and\nconcurrent users\nDetailed Tasks\n1. Set up your Large Language Model (LLM)\nWhile we highly recommend leveraging Google's Gemini API for this\nproject due to its advanced capabilities and free tier, we understand\nthe importance of flexibility in choosing the right tools for the job.\nAs such, you have the liberty to select any state-of-the-art Large\nLanguage Model for inference. Here are some options to consider:\nFor the purposes of this comprehensive guide, we'll focus on setting\nup and utilizing the Gemini API, given its powerful features and\naccessibility.\n1.1 Setting up the Gemini API\nFollow these detailed steps to set up your Gemini API access:\nFor in-depth implementation instructions and best practices, we\nstrongly recommend referring to the Gemini API Python Quickstart\nDocumentation . This resource provides valuable insights into\ninitializing the API client, sending requests, and handling responses\neffectively.\n1.2 API Key ManagementGoogle Gemini API (recommended and free)\nLocal models using Ollama or LM Studio (free)\nOpenAI's GPT models (GPT-3.5, GPT-4)\nAnthropic's Claude\n1. Open your web browser and navigate to\nhttps://ai.google.dev/aistudio\n2. Sign in with your Google account. If you don't have one, you'll\nneed to create it.\n3. Once logged in, locate and click on the \"Create\" button in the\ntop-right corner of the page.\n4. From the dropdown menu, select \"API key\".\n5. A new API key will be generated. Carefully copy this key and store\nit securely.\nImplementing secure key management is crucial for maintaining the\nintegrity and security of your application. Follow these best\npractices:\n2 Chat With PDF API\n2.1 FastAPI Endpoint Implementation\nDevelop the following FastAPI endpoints to facilitate PDF upload and\nchat functionality:\n2.1.1 PDF Upload1. Utilize environment variables to store sensitive information,\nincluding API keys.\n2. Create a . e n v file in your project's root directory to securely\nstore your Gemini API key locally.\n3. Leverage a robust library like p y t h o n \u0000 d o t e n v to efficiently load\nenvironment variables in your application.\n4. Ensure that your . e n v file is explicitly added to your . g i t i g n o r e\nfile to prevent accidental exposure of sensitive information in\nversion control.\nRequest Method:  POST\nEndpoint:  / v 1 / p d f\nDescription:  Endpoint for uploading and registering a PDF\nInput:\nDescription:  Multipart form data containing the PDF file\nExample\nc u r l  - X  P O S T  \" h t t p : \u0000 \u0000 l o c a l h o s t : 8 0 0 0 / v 1 / p d f \"  \\\n- F  \" f \u0000 l e = @ / p a t h / t o / y o u r / p d f / f \u0000 l e . p d f \"\nOutput:\nDescription:  JSON response with the generated PDF ID\nExample\n{\n    \" p d f _ i d \" :  \" u n i q u e _ p d f _ i d e n t i f \u0000 e r \"\n2.1.2 Chat with PDF2.1.1.1 State Management\nImplement a robust state management system with the following\nfeatures:}\nProcess:\na .  V a l i d a t e  t h e  u p l o a d e d  f \u0000 l e  ( f \u0000 l e  t y p e ,  s i z e  l i m i t s )\nb .  G e n e r a t e  a  u n i q u e  i d e n t i f \u0000 e r  f o r  t h e  P D F\n1. Design a data structure to efficiently store PDF(s).\n2. Implement error handling to manage various PDF formats and\npotential parsing issues.\n3. Store extracted text along with associated metadata (e.g.,\nfilename, document ID, page count) in a structured format.\n4. Consider implementing text preprocessing techniques to enhance\nthe quality of extracted content.\nRequest Method:  POST\nEndpoint:  / v 1 / c h a t / { p d f _ i d }\nDescription:  Endpoint for interacting with a specific PDF\nInput: JSON body containing the user's message\n{\n    \" m e s s a g e \" :  \" W h a t  i s  t h e  m a i n  t o p i c  o f  t h i s  P D F ? \"\n}\nOutput: JSON response with the AI-generated answer\n{\n    \" r e s p o n s e \" :  \" T h e  m a i n  t o p i c  o f  t h i s  P D F  i s \u0000 \u0000 \u0000 \"\n}\nProcess:\n2.3 LLM Integration\nImplement seamless integration with the Gemini API for advanced\nnatural language processing:\nFor detailed implementation guidance, refer to the Gemini API\ndocumentation  and best practices for prompt engineering and API\nintegration.\nProblems to tackle (Bonus points!)\n2.5 Error Handling and Logging\nImplement comprehensive error handling and logging mechanisms:a .  V a l i d a t e  t h e  p d f _ i d  a n d  r e t r i e v e  t h e  a s s o c i a t e d  P D F  c o n t e n t\nb .  U s e  t h e  G e m i n i  A P I  t o  g e n e r a t e  a  r e s p o n s e  b a s e d  o n  t h e  P D F  \nc o n t e n t  a n d  u s e r  q u e r y\n1. Initialize the Gemini API client using the securely stored API\nkey.\n2. Develop a function to generate context-aware prompts based on PDF\ncontent and user queries.\n3. Implement error handling for API rate limits, timeouts, and other\npotential issues.\n4. Consider implementing caching mechanisms to improve response times\nfor frequently asked questions.  (Optional)\nProblem 1:  Is using the Gemini 1.5 Flash that has 1 Million\ncontext size enough or Retrieval-Augmented Generation (RAG) is a\nbetter approach?\nProblem 2:  Having 1 Million context size is great but output\ntokens are limited to 8196, how would you queries that has more\nthan 8196 tokens?\nProblem 3:  Writing unit tests are great for ensuring the app works\njust fine, but how would you evaluate the performance of the Large\nLanguage Model?\nEnsure that all API responses include meaningful error messages and\nappropriate HTTP status codes for various error scenarios.\n2.6 Testing\nMake sure you add some tests to ensure\n2.7 Documentation\nProvide comprehensive documentation for the project:\nEnsure all documentation is clear, concise, and kept up-to-date with\nany changes to the project.\nEvaluation Criteria1. Develop a custom error handling middleware for FastAPI to catch\nand process exceptions.\n2. Implement detailed logging for all critical operations, including\nPDF processing, API calls, and state management.\n3. Use a structured logging format (e.g., JSON) for easy parsing and\nanalysis. ( Optional )\n4. Implement different log levels ( DEBUG, INFO, WARNING, ERROR) for\ngranular control over log output. ( Optional )\n1. Unit tests for individual components (e.g., PDF processing, Gemini\nAPI integration, state management).\n2. Integration tests to verify the entire application flow, including\nAPI endpoints and error handling.\n1. Develop a comprehensive README.md file including:\nProject overview\nDetailed setup instructions, including environment\nconfiguration\nExplanation of API endpoints with request/response examples\nTesting procedures and instructions for running the test suite\nCriteria Description Weight\nFunctionality Correct implementation of all required \nfeatures40%\nCode Quality Clean, readable code following Python best \npractices25%\nAPI Design Well-structured endpoints and appropriate \nuse of HTTP methods20%\nDocumentation Clear and complete documentation, including \nAPI docs and setup instructions10%\nError \nHandlingRobust error handling and informative error \nmessages5%\nTip (Bonus Points!)\nYou can use any library that will help you with the task, including\nbut not limited to:\nAdditional Considerations\nDeadline : Please submit your completed project within 7 days of\nreceiving this challenge.\nNote: While we appreciate timely submissions, we value quality over\nspeed. Take the time you need to showcase your best work!\nGood luck! We look forward to reviewing your submission.\nNeed any help?\nFeel free to reach out to directly from elif@sevenapps.co  if you have\nany questions or need any help.Langchain\nSee: https://python.langchain.com/\nLLama-Index\nSee: https://docs.llamaindex.ai/",
      "created_at": "2024-11-27T17:03:44.675996"
    }
  },
  "filename_index": {
    "filetosent.pdf": [
      "0cdcd536-8d91-4c82-8243-845dbb925b03",
      "24d60f28-c07e-4d9a-a1d0-495ac0fbd67a",
      "2dfdee0d-8940-4b60-b36e-1553f3291341",
      "b3ce960b-5d90-4866-bede-0a1ea0df9180",
      "cfe196df-1c36-47c0-8bd0-f71a0244917c",
      "3d1f5336-806c-4b78-ba2c-b7b58e67f471",
      "b3c924a4-e0c4-4ffb-87d4-eddb0f489a73"
    ]
  },
  "size_index": {
    "109333": [
      "0cdcd536-8d91-4c82-8243-845dbb925b03",
      "24d60f28-c07e-4d9a-a1d0-495ac0fbd67a",
      "2dfdee0d-8940-4b60-b36e-1553f3291341",
      "b3ce960b-5d90-4866-bede-0a1ea0df9180",
      "cfe196df-1c36-47c0-8bd0-f71a0244917c",
      "3d1f5336-806c-4b78-ba2c-b7b58e67f471",
      "b3c924a4-e0c4-4ffb-87d4-eddb0f489a73"
    ]
  },
  "date_index": {
    "2024-11-25": [
      "0cdcd536-8d91-4c82-8243-845dbb925b03"
    ],
    "2024-11-27": [
      "24d60f28-c07e-4d9a-a1d0-495ac0fbd67a",
      "2dfdee0d-8940-4b60-b36e-1553f3291341",
      "b3ce960b-5d90-4866-bede-0a1ea0df9180",
      "cfe196df-1c36-47c0-8bd0-f71a0244917c",
      "3d1f5336-806c-4b78-ba2c-b7b58e67f471",
      "b3c924a4-e0c4-4ffb-87d4-eddb0f489a73"
    ]
  }
}